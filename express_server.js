var express = require("express");
var app = express();
var PORT = 8080; // default port 8000
const bodyParser = require("body-parser");
app.use(bodyParser.urlencoded({extended: true}));
app.set("view engine", "ejs");

function generateRandomString() {
  var alphaNums = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789";
  var alphaNumString = "";
  // '6' sets string to 6 characters by calling function 6 times
  // and concatenating to alphNumString
  for (var i = 0; i < 6; i++) {
    alphaNumString += alphaNums.charAt(Math.floor(Math.random() * alphaNums.length));
  }

  return alphaNumString;
};

var urlDatabase = {
  "b2xVn2": "http://www.lighthouselabs.ca",
  "9sm5xK": "http://www.google.com",
};

// ENDPOINTS / ROUTES

// send get request to server
app.get("/", (req, res) => {
  res.send("Hello!");
});

// route handler for "/urls" uses res.render() to pass the URL data to your template
app.get("/urls", (req, res) => {
  // When sending variables to an EJS template,
  // you need to send them inside an object,
  // even if you are only sending one variable.
  // This is so you can use the key of that variable
  // (in this case the key is /urls) to access the data within your template
  let templateVars = { urls: urlDatabase };
  res.render("urls_index", templateVars);
});

// send get request to server asking to return the URL database at http://localhost:8080/urls.json
// (http://localhost:8080/urls.json will display the urlDatabase object)
app.get("/urls.json", (req, res) => {
  res.json(urlDatabase);
});

// send get request to server to display "Hello World"
// at http://localhost:8080/hello
app.get("/hello", (req, res) => {
  res.send("<html><body>Hello <b>World</b></body></html>\n");
});

// GET route to render the urls_new.ejs template
// in the browser, to present the form to the user
// The GET /urls/new route is defined before the GET /urls/:id route because
// Routes defined earlier will take precedence, and the path /urls/new actually
// matches the /urls/:id pattern (with the :id placeholder matching the
// string "new" instead of an actual id.
// So, in case of overlap, routes should be ordered from most specific to least specific.
app.get("/urls/new", (req, res) => {
  res.render("urls_new");
});

//route renders urls_show.ejs template.
// ":id" in "/urls/:id" indicates that the ID, or key,
// of the url will be in that part of the URL.
app.get("/urls/:id", (req, res) => {
  const key = req.params.id;
  // creates new object to pass to the template which
  // includes the short and long URLs
  res.render("urls_show", { shortURL: key,
                            longURL: urlDatabase[key]});
});

// GET route handler for shortURL requests
app.get("/u/:shortURL", (req, res) => {
  let longURL = urlDatabase[req.params.shortURL];
  res.redirect('/urls');
});

// route for POST request for deleting URLS
app.post("/urls/:id/delete", (req, res) => {
  delete urlDatabase[req.params.id];
  res.redirect('/urls');
})

// route for POST request for updating URLS:
// replaces longURL with user's input in the form in urls_show.ejs
app.post("/urls/:id/update", (req, res) => {
  urlDatabase[req.params.id] = req.body.updateURL;
  res.redirect('/urls');
})

// route that will match POST request (in urls_new) and handle it.
// this POST route definition logs the request body and gives a dummy response ('Ok').
app.post("/urls/new", (req, res) => {
  const longURL = req.body.longURL
  const shortURL = generateRandomString();
  // req.body = the long URL that was input
  // adds new entry to the database: set the key as a new
  // random string generated by the generate random string function,
  // and set the key's value to the longURL (req.body.longURL)
  urlDatabase[shortURL] = longURL;
  res.redirect('http://localhost:8080/urls/' + shortURL); // Respond with 'Ok' (we will replace this)

});


app.listen(PORT, () => {
  console.log(`Example app listening on port ${PORT}!`);
});